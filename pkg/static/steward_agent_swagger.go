package static

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type staticFilesFile struct {
	data  string
	mime  string
	mtime time.Time
	// size is the size before compression. If 0, it means the data is uncompressed
	size int
	// hash is a sha256 hash of the file contents. Used for the Etag, and useful for caching
	hash string
}

var staticFiles = map[string]*staticFilesFile{
	"steward_agent.swagger.json": {
		data:  "\x1f\x8b\b\x00\x00\x00\x00\x00\x02\xff\xec\\ao\xdb8\xd2\xfe\x9e_1\xaf\xde\x03\x9a\xdc\xfa\xe44\xbb\xd8\x0fY\x04\xb8l\x9bv\xb3H\xd3\xc0q>\x1c\xaa \xa1\xa4\x91ŭD\xaa$\xe5\xd4[\xe4\xbf\x1f\x86\x94lYv\x1c;n\xbb\xeb\x9c\v\x14\x8eEr\xf8p\xe6\x99\xe1p$\xf9\xcb\x0e\x80\xa7\xef\xd8`\x80\xca;\x04\xef\xc0\xdf\xf7:t\x8d\x8bDz\x87@\xed\x00\x9e\xe1&Cj\u007f\xc5\x04\xd7p\x1c\xe7\\\xc0\xf1ũ\xed\v\xe0\rQi.\x05\xf5\xd8\xf7\xf7\xfd\x97\xde\x0e\xc0\xbd\x95\x13I\xa1\xcb\x1c\xb5w\b\x1f\\_V\x14\x19\x8f\x98\xe1Rt\xff\xd0RP\xdfk۷P2.\xa3%\xfb2\x93\xea\t\xc0.\x1b\xa00\x93\v\x00\xde\x00M\xe3+\x80'\vTV\xd4iL@\xed\"nθ6\xc74\xb6Z\x8a\xed\xa9P\x17Rh\xd4S\x02\x00\xbc\x83\xfd\xfd\xd6%\x00/F\x1d)^\x98J\x01Ǡ\xcb(B\xad\x932\x83Z\x92\xdf\x10o\a\xe9(Ŝ\xcd\b\x03\xf0\xfe\xa10!9\xffߍ1႓\\\xdd\xd5\x06\uf60a\xc7p{\x95`oj\xf8}\xe3\xdb}sF/Ƅ\x95\x99y\x1c\xbd\x80R\xe0\xe7\x02#\x831\xa0RR\x8d\x17\xb1\xee\x1aT)\f\xcf\xf1\x84\x84.\xc0\xbd3g\x05^\xc1\x14\xcbѠ\x9a\xb0\xc3\xfdk-G\xb0\xdc\x12U\x1b\xa6L\x1b0\xb7K\xfcT\xa2\x1a\xb5\x9b\x14~*\xb9BbF\xc22\x8d\xadf3**\xb1\x8a\x8bA{p\"U\xceH\xb7\x1e\x17\xe6矼\x87\xac\xf0\x00ւ\r\xf0F\xf3?qC\xf0\xda\xcfo\x05u.\x13\xae\x1bL0l\xd0\xe6\x80\xf3\xe5\xc9\xd0\xeb\x9d\xd6b\xbcB\xeae\xa2\xc1+\x85\xcc\xe0\x06Ń\x06\xe0mDX\xcc\xdaPƣ\xf9\xac\x9d\xd7\xd2 \xadQ%~\x1dk9b-\xb1Χ\xf2}\xa7\xa1\xa4zO\xec~\xb1\x9f>\x8f\xef\x9b\xdb\xe3\x92\x1eqUě\xe5\x11\r\xc0[\x8fX\xec\x115/\xe6{\x05eX\xabyłH\xde\xd9\xfa\xe7#\xfey\xc3\xe3\xfb.\x17CnXų\x153ٷhN\xc7\xc3\xdfH\xb5A>k\xa1\x9e\n^\xa3\xdf:\xee\x12\x8e{\xf3]\x1c\xf7\x9bS^\xe1\x80kcO\x9f\xab\xeeM\xbdj\xe8E\x19f<z}\xfaz3\xd8>\x86\xbb\xa5\xf9߆曱?5\x98\xf3\xa9D\xfd\x17lU\xad$r\xe9\x9di\x836\xa3\x1a\xed\xd6;\x17\xfb\xc3fl?\xe3\n@\x8c\x19\x1a\\\x82\xad\xafm\xc7\r\"l\x03\xf0\x96\xb3ρ\xb3\x0f\x86\xden\xc6J\x11\xa5OH\x95\xce\xec\xc0M*tO\x00oI\xfd\xbcI\xad\xd3\xd2\xc4\xf2N<\x81֗\xd5\xd0\r\"\xf6\x14\xe4-\xb5\x9f\x1f\xb5g\xf4\xb9\u009d\xc8K7vcnE:\xbc[\x16o\xefE>\xfb{\x91K`\xa9\x9f\x82xƷF7)@5\x11oC\xd4߾\xb8UQ뻕\xb4\x1ç\x97\xb46\xc9\x15\xc6p\xb7~\xf0\xbf\\\xd4\xda$\xca6\x11oY\xfb\\\x8fI\xdd/\xees\xad\xa7S6\x89\xd6M\xc4[Z?rn\xaa\xa9\xb1\xbd\x01\xf8\x9ds\xa4\xf1\xe3\xdb\r\f\x93\x87\xadm\xe9\xea\xd20SN=p\xfd\xc09\xcfCQ\xe6S\xd3{\x97\xfd\xe3^\xff\xf4\xfcm\xd3e{W\xe7\xe7\xadK'\xbd\xde\xfb^\xf3B\xff\xa4\xf7\xee\xf4\xfc\xb8\u007f\xf2\xbaF~\xdd\xd8\nk瘈\x9f\x8a8\x85\x92F\x86er,F\xf3P\xcb\xf0\x0f\x8c&\xa7t\xea^\xa02\xbc\x15Cl\xff\x9bRe\xedȲ\xe0\x94;\x1b`\xaezg]\x85Z\x96*B ~\x81I\x99\x81R\xf0O%f#\xe01\n\xc3\x13\x8e\x1aL\x8a@\xb2A&\xf6o\x8d\x8a\xb3\x8c\xff\x89q \xec\x92\"\x99AX&\t*\xc8Qk6@\x1f\xfa)Bƴ\x01\x8d\x83\x1c\x85\xa9\a_\xf5\xce^h ǁ\xbc\xd4\x06\x14\x16\n5\n\x13\bjN\xca,\x1b\xc1\xa7\x92e4w\xec\x90UC-\x86]\xa6\x81\x8b@ܒ\x88\xee@\xcaA\x86~\xadX\xffu\xe9\"\xf4\xed\x9eC`\x87\xebT\x96Y\f!\x02\x17\xc0 bB\n\x1e\xb1\f\xe8\xe0\x1f\x88]\xf4\a~\a2d1\x17\x03\b<?\xf0\x80k\x10\xd2\x00\x8b\",\f\xc6{~ \x02q*\xa0P,2<\xc2\x0e\x18d\xb9\x86R\x97\x8c\x10\x17\n#\x99\x17<\xa3I\x8c\xb4xC.\x98\x1a\x01\xcb2\v];\r\x9b\x14GA\x15\x1b\x81\x1b0\x12Jm\xa1јH\n\x83\x9f\xad\xb6\x8e\xc5ȇ\xdf\xe4\x1d\x0eQu\b+\xe9N\xc3]ʣ\xd4\x0e1)\x06º1\xc2mjLq\xdbq\x9f\xfa\xb6\x03R\x81\x90\xe0Z; \x05ҺAZ\x06X\xc4\x1a\r\x94\x050\x8b-\x10\x1a\xd5\x10\x95\x83\x98\xb3B;m\xdb\x19\x8d\xac\xcd\n\rg\x04\xa6!\x91Y&\xef\xf4!)\xe7\x9fp\x9aL\xa6$\x05\x16J\x0ey\x8c\xf1\x18\x15]dZ\x979\xc6>\r8\x16\xf0[\xbf\u007f\x01oO\xfa EM\x0fǋ\x11\xc7,\x06\x06\x1f\xda&\xee\x8f\n\xbc\xfep\x1d\b\x80!\xcbJ\xab\xb9JӮ\x90c\xd7^\xbd\xc8\x01L\xb8\xdd\xc7\xcd7y\x97C\x03SH\xa6\x91w\x18\xd3\n#\x16\x11c\xa5\xfcX\x16\xb4U\x95\x99\xd1\x102\x8dq\x05\x8d&\xbc\xea\x9dY\xe9)\x1bZ\xf5\xe7\r\xbb\xc7\xce\xf0\xac\x06C\u007f\x0f%\x8f\x81\x89\x11\x8du\xa2--\x15&Ra\xa7\xeeI\x02\x98\xe1!ϸ\x19\x81@\x8c\xad\xceC\x04\xeb\x1ajH\x8e\x06\x04#J\x99\x18\xa0m\xb5\x8c\xf2a\xf7J#TU\x1fZ\b\x19\x8dH\xef\xac\xc6\x04\x1bX\xe0\xa1B\xf6\x91\xd8]I\xf0\xf7\xc8d\xe7\xd2\xe0!\x98\x94kHJ\x119j\x10\x86\x8a\xfdQ\xa9\x14\n\x93\x8d\x80\r\x19\xcfX\x98\x8dy*\x93\x84G\x9ceU\x04\b\xcb\x04\x14f\xc84v\x80\x89\x98\x88]\t)I\x85\xc4\xde\t\xa1B\x1cp!\b\xce\x1d7i \xa8\xc5wvf\x05\xd7~$s\xebov\xafA\rҤ\x8e\x9a\xa2\xcds\xd8%\xc1)\x02\xe6\x85\x19U\xdcۃ\x9c\x0fR\x03!\x06\xc2\xceN\xb3\x00ϋ\f)\x12Y\xfb\x83.0\xe2\t\x8f@c΄\xe1\x91\xf6\xbd\xb9)\x83%\xd9*\xa1vRN\fG\x06\x17\x86\xe1w\xc4\xf4\x10\x81\x11\x95y܈\xac\xd0\x0e\xacU\fd\xa1\x1cb\r\xbe2x\x13\xf8\x9c\xf3\xd9Ԍ\xb7\xc7btk\xa3\f\xe3\xe4\x04\x02\x98\n\xb9Q\xc4\xc3\x05\xb3\xd7\xfe\xcf2YY\rX \xc8Ym\xc0p\x93\x84\v\xf7\x8a\xf1\xd6@\x96\xbd\xa8I\x93\xf1\xd0\xce]\xc5\n\r\xba,\n\xa9lX,X\xf4\xb1[\n\xfa\xa0`\xe8\xdc]\xd7\ft\xc1[&P\x1a\xe785\x855y(\x8bc\xee\xf8\f\x03\x14\x94\xb7[\x04&\x95\xb1\xae\xb1\x91L\xab?Bt\xf2\x99\x11A\xe0\xe5!\\ЄD\xe2jn6^>\x17\xf0\xea\x87\x1fl\u007fR\xee\x1b)!\x91\x12\x8e\xc0\xf7\xfd_\xdc5\x12\xcaĨ\xfa\xc6\xc4\xc8'qo\x94\xccw\x13)\xf7\xaa\xeb\xbe\xef\xbb?x\x02\xbb\xd4\xe9\xcaN\u0557\xbbA\xb9\xbf\u007f\xf03u݃/\xaeO\xa3\xfb}\x13\xea\xc1#P\u007fgC\xb6\fV8\xb2{\r\tX\x88\x91\xeb\xdd7R\xfaQƴn\xa2sb\xa9\x87C\xd1\xe8\xf5K\x036Ը\u007f|\x04\xf7\xc5ȤR\x8c\x91;\xf1o\xa4\xdc\xf5}\x8a[\x95^\x1d\xeaݽiE\xdb\x05\xcc\xe2\xa7\xe6S\a\xff\xf5\xc9\xe5\xab\xde\xe9E\xff}o\xef\xb0^\xc1\xc4\x02\x8d\xf1\x95\x84\x06\xf0\x9f\x1e\x01\xfeV֘-\xe8\xc3#p\xd6,B\xff\x8d\x94_|߿\xaf\x9a\x99\x18uhc\xa2>\x85\v\xe5\xef\x98\xd2)\xcbhM\r\f\xe3E̕X\x8b\xe3IKؕ\xc8'\xe2\xecdְ\xb6\xd7\xff\x1d\x81\xe0\xd9\xc4|\x8d9\xac\x9d(o\xb2k\xabݥ\xde\xc7!\x1cA\xd1v\xdc;\x9ee\xd4P%\xbf\x14\xee\x03\xf1bND\xefRj\xe7\xdb\x06ڠ^P\xfe0\x8e\x16\x14IH\xabt\xc1i6\x10co\x15٨\xcewf\xf2\xc3\xf1\x86\a,1\xe8\xf6\x02\x9bv\xbe\xe8\xbe\bD\x15*\xea)\\\x16\x85\x955\x03/\x91\xd2\x0f\x99\xb2\xe8>wG\xfe\x9f\x81\xe7\xd6\xe3\x92\x0f\x97\x18Y\xe1\x81g[-\x1d\x02\xf1\xfb\xe5\xfb\xf3@\x1c\x1d\x1d\x1d9m\xd1\xf7I\"\xeb\xf6\x17I\xa4\x03\x17n]\x9eR\xea*>*\x1c\x94\x19S\x81\x98\x1dB\xcd1N\x82f\a0\x0f1\x8e'\xe1\xb3SE_\x11\x88F\x8cK,\xe0\xdb\u007f\x13\xe4\xdb*E\x1c\a\xf9\xa6\n\xfc\x9ȧ5UI\xd9\xc4\xdfI\x9e\x95\xf0\f+ǭ\xc9}\x81JK1\xe1\x8c\xdb\xf7 \xe1J\x9b\x1b\xab\xa1#x\xf9K\xab\x95\xecP7\x1eLE\x02:\xe1֝\x03Ϣ\x0e\xbcC\b\xbcy\xbc\x99\x06\xe6;(\x81י\b\xb00\xceY\ue114\xfb\xfb?F\x0e\x82\xfd\x1b\x1b=\t\xd2\xc3\x1d\x1b\x10O\x93*\xad\x98־\xd3#\xd7p\x87Y\xf6\xaf\x8fB\xde\t\xcb۔i:Y\x94\xda\xc8\x1c\x1c=\xa6\x8d\xdbq\x1be\xcb\xe2\xcey\x1aӐI\xc5\x00\x983h n-uj\x8b\xa62\x8b\x9d9\x1b3\xd9CM\xc5\x04\xa8N\x1e\x15\x11\x02aŌm\x0e\xbb\xc4\xffz)\x1f\x1e:<]\u007f\xb8\xde;\\\xc7N\xd3\xe2\xa6Le\xd7\xe3d\xbc\xf4\x0f^\x1e\xe8\xc0\xab\xb4>}T\x9e*\xf2\xacqVƖ\x80\x85E\x98f\xda\x17\xc9\xf8\xc1\xac\x8f\v\x83\x03T\x0f\xa5}\\\x98\x1f\x0f\xe6K\xadt\xff\x14@1\x1a\xc63\xfd\xd0P\xa6\x14\x9b\xae\x00y\xdc`\xaegKu\xf3\xcb;\xcd\xda\xc4\xfc2\xda\xdc\"\xea\xd4kKk؉\xc7O\xd1IU\x17[y\x1cӚ\x0f\x04\xc67\xae\bv\xf3\xb4\xd9Q\xc4Ri:\x15M\xe4|\x05\xfb,S\x00o\xc2\xd0\xed2\xd8\x02+7\xebf+XvދQk\x18\xdb\x16+\x97U\xf8Bp\xc6(\x1e\x96f-4O%Q\xd5g\t\xad\xb7\xd1\xf6i\xe4\x8a+\xecO϶R\xa9\xb3תj\x9e_\xbd\xfb\xf5d\xaa\xac\xf9\xfe\xd7\xdfO^\xf5\x9bW\x8e{\xbd\xe3\xff4/\xfc\xfa\xfe\xfdٴ\x90\xb3\xb3Gj\xa0\xbd\x99\n\xe8\x82wƿO\xf0X\xa4\xeb\xb9Ok\xfc\xf5\xb0\xe6=\\\xff0\xaa\x87%,\xbd\xb0y\"f^IYC/\xac\xb5Y\xac\xfcV\xecBu\xcd>h\xb0\x06Թ7IV\xbbA\xb2\x10\xec\xbcg\xccׁ\xfbM\xb7\x82\xd9_~Y\x03j$\xcbY\x12,WVk=\xa57\xb5\xb1\xb7\u007f\x83\xe7\xab\xe6H\x0f\xbd\xa3}\xbf\xbc\xfe\xbe\x1e5\xbf\x8d\x02\xe7\x13\xfe++p\xf6\x1e\xe2\x92\x1a\x9cy\xfbp\xdd(\xf4\xc4\xcc/~ڰ!\xaa\x8f\xf8u2\x9f\xd97xW\x8b\xe7\x973\x8f\x88\xff\xbd3\xf6\xc9\xcf{\xad\x9e\xec\xd7)\xd47\x8f\v\xe3ltuf\xcf\u007f'c5\x9b\xce\xfbݑ\xa7HX1Qء\xff\xf7;\xff\r\x00\x00\xff\xffbX%\x1c\xc8M\x00\x00",
		hash:  "407212e5ddb2dc3a3176bddf0443565b11ced41ac5f3fef353c566b2bbd57601",
		mime:  "application/json",
		mtime: time.Unix(1592926770, 0),
		size:  19912,
	},
}

// NotFound is called when no asset is found.
// It defaults to http.NotFound but can be overwritten
var NotFound = http.NotFound

// ServeHTTP serves a request, attempting to reply with an embedded file.
func ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	path := strings.TrimPrefix(req.URL.Path, "/")
	f, ok := staticFiles[path]
	if !ok {
		if path != "" && !strings.HasSuffix(path, "/") {
			NotFound(rw, req)
			return
		}
		f, ok = staticFiles[path+"index.html"]
		if !ok {
			NotFound(rw, req)
			return
		}
	}
	header := rw.Header()
	if f.hash != "" {
		if hash := req.Header.Get("If-None-Match"); hash == f.hash {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("ETag", f.hash)
	}
	if !f.mtime.IsZero() {
		if t, err := time.Parse(http.TimeFormat, req.Header.Get("If-Modified-Since")); err == nil && f.mtime.Before(t.Add(1*time.Second)) {
			rw.WriteHeader(http.StatusNotModified)
			return
		}
		header.Set("Last-Modified", f.mtime.UTC().Format(http.TimeFormat))
	}
	header.Set("Content-Type", f.mime)

	// Check if the asset is compressed in the binary
	if f.size == 0 {
		header.Set("Content-Length", strconv.Itoa(len(f.data)))
		io.WriteString(rw, f.data)
	} else {
		if header.Get("Content-Encoding") == "" && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			header.Set("Content-Encoding", "gzip")
			header.Set("Content-Length", strconv.Itoa(len(f.data)))
			io.WriteString(rw, f.data)
		} else {
			header.Set("Content-Length", strconv.Itoa(f.size))
			reader, _ := gzip.NewReader(strings.NewReader(f.data))
			io.Copy(rw, reader)
			reader.Close()
		}
	}
}

// Server is simply ServeHTTP but wrapped in http.HandlerFunc so it can be passed into net/http functions directly.
var Server http.Handler = http.HandlerFunc(ServeHTTP)

// Open allows you to read an embedded file directly. It will return a decompressing Reader if the file is embedded in compressed format.
// You should close the Reader after you're done with it.
func Open(name string) (io.ReadCloser, error) {
	f, ok := staticFiles[name]
	if !ok {
		return nil, fmt.Errorf("Asset %s not found", name)
	}

	if f.size == 0 {
		return ioutil.NopCloser(strings.NewReader(f.data)), nil
	}
	return gzip.NewReader(strings.NewReader(f.data))
}

// ModTime returns the modification time of the original file.
// Useful for caching purposes
// Returns zero time if the file is not in the bundle
func ModTime(file string) (t time.Time) {
	if f, ok := staticFiles[file]; ok {
		t = f.mtime
	}
	return
}

// Hash returns the hex-encoded SHA256 hash of the original file
// Used for the Etag, and useful for caching
// Returns an empty string if the file is not in the bundle
func Hash(file string) (s string) {
	if f, ok := staticFiles[file]; ok {
		s = f.hash
	}
	return
}
